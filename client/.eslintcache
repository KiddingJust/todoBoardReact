[{"/Users/kidding/Documents/Lecture/Blog/client/src/index.js":"1","/Users/kidding/Documents/Lecture/Blog/client/src/App.js":"2","/Users/kidding/Documents/Lecture/Blog/client/src/store.js":"3","/Users/kidding/Documents/Lecture/Blog/client/src/routes/Router.js":"4","/Users/kidding/Documents/Lecture/Blog/client/src/redux/reducers/index.js":"5","/Users/kidding/Documents/Lecture/Blog/client/src/components/Header.js":"6","/Users/kidding/Documents/Lecture/Blog/client/src/components/Footer.js":"7","/Users/kidding/Documents/Lecture/Blog/client/src/redux/sagas/index.js":"8","/Users/kidding/Documents/Lecture/Blog/client/src/components/AppNavbar.js":"9","/Users/kidding/Documents/Lecture/Blog/client/src/redux/sagas/authSaga.js":"10","/Users/kidding/Documents/Lecture/Blog/client/src/redux/types.js":"11","/Users/kidding/Documents/Lecture/Blog/client/src/redux/reducers/authReducer.js":"12","/Users/kidding/Documents/Lecture/Blog/client/src/components/auth/LoginModal.js":"13","/Users/kidding/Documents/Lecture/Blog/client/src/components/auth/RegisterModal.js":"14","/Users/kidding/Documents/Lecture/Blog/client/src/components/auth/LoadUser.js":"15"},{"size":221,"mtime":1607154042387,"results":"16","hashOfConfig":"17"},{"size":538,"mtime":1607066496446,"results":"18","hashOfConfig":"17"},{"size":1172,"mtime":1606994409023,"results":"19","hashOfConfig":"17"},{"size":430,"mtime":1607069738041,"results":"20","hashOfConfig":"17"},{"size":419,"mtime":1607076044974,"results":"21","hashOfConfig":"17"},{"size":423,"mtime":1607069410428,"results":"22","hashOfConfig":"17"},{"size":583,"mtime":1607067603292,"results":"23","hashOfConfig":"17"},{"size":544,"mtime":1607074842638,"results":"24","hashOfConfig":"17"},{"size":3946,"mtime":1607155078739,"results":"25","hashOfConfig":"17"},{"size":3656,"mtime":1607154954719,"results":"26","hashOfConfig":"17"},{"size":842,"mtime":1607151757379,"results":"27","hashOfConfig":"17"},{"size":3088,"mtime":1607154540391,"results":"28","hashOfConfig":"17"},{"size":3272,"mtime":1607142044278,"results":"29","hashOfConfig":"17"},{"size":3726,"mtime":1607149045824,"results":"30","hashOfConfig":"17"},{"size":322,"mtime":1607154452746,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"144wtba",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/kidding/Documents/Lecture/Blog/client/src/index.js",[],["65","66"],"/Users/kidding/Documents/Lecture/Blog/client/src/App.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/store.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/routes/Router.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/redux/reducers/index.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/components/Header.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/components/Footer.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/redux/sagas/index.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/components/AppNavbar.js",["67"],"import React, { Fragment, useState, useCallback, useEffect } from 'react';\nimport { Navbar, Container, NavbarToggler, Collapse, Nav, Button, NavItem, Form } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport LoginModal from '../components/auth/LoginModal';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LOGOUT_REQUEST } from '../redux/types';\nimport RegisterModal from '../components/auth/RegisterModal'\n\nconst AppNavbar = () => {\n    const [isOpen, setIsOpen] = useState(false)\n    //무엇을 불러오는지\n    const {isAuthenticated, user, userRole} = useSelector((state) => state.auth)\n    console.log(userRole, \"UserRole\");\n\n    //로그아웃\n    const dispatch = useDispatch();\n\n    //useCallback은, 메모리제이션된 콜백 반환? \n    //useEffects는 \n    const onLogout = useCallback(()=>{\n        dispatch({\n            type: LOGOUT_REQUEST\n        })\n    }, [dispatch])\n    //새로 작동하는 부분? user 변했을 떄setIsOepn을 false로 해주자.\n    useEffect(() => {\n        setIsOpen(false)\n    },[user]);\n\n    //toggle을 작동하게 되면, 반대로 작동하게? 뭔소리여\n    const handleToggle = () => {\n        setIsOpen(!isOpen)\n    }\n\n    const addPostClick = () => {\n\n    }\n\n    const authLink = (\n        //userRole이 MainJuin이면 add post라는 버튼 모양의 링크가 표시되고 아니면 빈값. \n        <Fragment>\n            <NavItem>\n                {userRole === \"MainJuin\" ? (\n                    <Form className=\"col mt-2\">\n                        <Link to=\"post\" className=\"btn btn-success block text-white px-3\" onClick={addPostClick}>\n                        </Link>\n                    </Form>\n                ): \"\"}\n            </NavItem>\n            <NavItem className=\"d-flex justify-content-center\">\n                <Form className=\"col mt-2\">\n                    {user && user.name ? (\n                        <Link >\n                        <Button outline color=\"light\" className=\"px-3\" block>\n                            <strong>{user ? `Welcome ${user.name}`:\"\"}</strong>\n                        </Button>\n                        </Link>\n                    ): (\n                        <Button outline color=\"light\" className=\"px-3\" block>\n                            <strong>\"Can't find user</strong>\n                        </Button>\n                    )}\n                </Form>\n            </NavItem>\n            <NavItem>\n                <Form className=\"col\">\n                    <Link onClick={onLogout} to=\"#\" >\n                        <Button outline color=\"light\" className=\"mt-2\" block>\n                            Logout\n                        </Button>\n                    </Link>\n                </Form>\n            </NavItem>\n        </Fragment>\n    )\n\n    const guestLink = (\n        <Fragment>\n            <NavItem>\n                <RegisterModal />\n            </NavItem>\n            <NavItem>\n                <LoginModal />\n            </NavItem>\n        </Fragment>\n    )\n\n    return (\n        //sticky-top은 스크롤 하더라도 가장 상단에 붙는 것. \n        <Fragment>\n            <Navbar color=\"dark\" dark expand=\"lg\" className=\"sticky-top\">\n                <Container>\n                    <Link to=\"/\" className=\"text-white text-decoration-none\">\n                        Work Repository\n                    </Link>\n                    <NavbarToggler >\n                    </NavbarToggler>\n                    <Collapse isOpen={isOpen} navbar>\n                        <Nav className=\"ml-auto d-flex justify-content-around\" navbar>\n                            {isAuthenticated ? (\n                                authLink\n                            ) : (\n                                guestLink\n                            )}\n                        </Nav>\n                    </Collapse>\n                </Container>\n            </Navbar>\n        </Fragment>\n    );\n};\n\nexport default AppNavbar","/Users/kidding/Documents/Lecture/Blog/client/src/redux/sagas/authSaga.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/redux/types.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/redux/reducers/authReducer.js",["68","69","70"],"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, CLEAR_ERROR_REQUEST, CLEAR_ERROR_SUCCESS, CLEAR_ERROR_FAILURE, LOGOUT_REQUEST, LOGOUT_FAILURE,\n         LOGOUT_SUCCESS, USER_LOADING_FAILURE, USER_LOADING_REQUEST, USER_LOADING_SUCCESS, REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE} from '../types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: \"\",\n    userId: \"\",\n    userName: \"\",\n    userRole: \"\",\n    errorMsg: \"\",\n    successMsg: \"\"\n}\n\nconst authReducer = (state = initialState, action)=>{\n    switch(action.type){\n        case REGISTER_REQUEST:\n        case LOGOUT_REQUEST:\n        case LOGIN_REQUEST:\n            return {\n                ...state,   //기존의 상태값 얕은복사? 기존것과 비교하는 과정을 거치는게 리액트이므로...\n                errorMsg: \"\",\n                isLoading: true //스피나 넣으려고?\n            }\n        case REGISTER_SUCCESS:\n        case LOGIN_SUCCESS:\n            //action.payload.token으로 받은 걸 token에 저장\n            localStorage.setItem(\"token\", action.payload.token)\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false,\n                userId: action.payload.user.id,\n                userRole: action.payload.user.role,\n                errorMsg: \"\"\n            }\n            \n        case REGISTER_FAILURE:\n        case LOGIN_FAILURE:\n        case LOGOUT_FAILURE:\n            //action.payload.token으로 받은 걸 token에 저장\n            localStorage.removeItem(\"token\")\n            return {\n                ...state,\n                ...action.payload,\n                token: null,\n                user: null,\n                userId: null,\n                isAuthenticated: false,\n                isLoading: false,\n                userRole: null,\n                errorMsg: action.payload.data.msg\n            }\n        case USER_LOADING_REQUEST:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case USER_LOADING_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload,\n                userId: action.payload._id,\n                userName: action.payload.name,\n                userRole: action.payload.role\n            }\n        case USER_LOADING_FAILURE:\n            return {\n                ...state,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                userRole: \"\",\n            }\n        case LOGOUT_SUCCESS:\n            localStorage.removeItem(\"token\");\n            return {\n                token: null,\n                user: null,\n                userId: null,\n                isAuthenticated: false,\n                isLoading: false,\n                errorMsg:\"\",\n            }\n\n        default:\n            return state\n        \n    } \n}\n\nexport default authReducer;","/Users/kidding/Documents/Lecture/Blog/client/src/components/auth/LoginModal.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/components/auth/RegisterModal.js",[],"/Users/kidding/Documents/Lecture/Blog/client/src/components/auth/LoadUser.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":31,"column":11,"nodeType":"77","messageId":"78","endLine":31,"endColumn":23},{"ruleId":"75","severity":1,"message":"79","line":1,"column":55,"nodeType":"77","messageId":"78","endLine":1,"endColumn":74},{"ruleId":"75","severity":1,"message":"80","line":1,"column":76,"nodeType":"77","messageId":"78","endLine":1,"endColumn":95},{"ruleId":"75","severity":1,"message":"81","line":1,"column":97,"nodeType":"77","messageId":"78","endLine":1,"endColumn":116},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'handleToggle' is assigned a value but never used.","Identifier","unusedVar","'CLEAR_ERROR_REQUEST' is defined but never used.","'CLEAR_ERROR_SUCCESS' is defined but never used.","'CLEAR_ERROR_FAILURE' is defined but never used.","no-global-assign","no-unsafe-negation"]